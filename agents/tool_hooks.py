"""
–†–µ–µ—Å—Ç—Ä Tool Hooks –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤.
–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ middleware —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
"""

from typing import Dict, List, Callable, Any, Optional
from functools import wraps
import time
import logging

logger = logging.getLogger(__name__)


# === –ì–û–¢–û–í–´–ï HOOK –§–£–ù–ö–¶–ò–ò ===

def logging_hook(func: Callable) -> Callable:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        start_time = time.time()
        logger.info(f"üîß Tool called: {func.__name__}")
        logger.debug(f"Args: {args}, Kwargs: {kwargs}")
        
        try:
            result = func(*args, **kwargs)
            duration = time.time() - start_time
            logger.info(f"‚úÖ Tool {func.__name__} completed in {duration:.2f}s")
            return result
        except Exception as e:
            duration = time.time() - start_time
            logger.error(f"‚ùå Tool {func.__name__} failed after {duration:.2f}s: {e}")
            raise
    return wrapper


def rate_limiting_hook(max_calls_per_minute: int = 60):
    """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    call_times = []
    
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        def wrapper(*args, **kwargs):
            now = time.time()
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—ã–∑–æ–≤—ã (—Å—Ç–∞—Ä—à–µ –º–∏–Ω—É—Ç—ã)
            call_times[:] = [t for t in call_times if now - t < 60]
            
            if len(call_times) >= max_calls_per_minute:
                raise Exception(f"Rate limit exceeded: {max_calls_per_minute} calls/minute")
            
            call_times.append(now)
            return func(*args, **kwargs)
        return wrapper
    return decorator


def validation_hook(func: Callable) -> Callable:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        dangerous_patterns = ['rm -rf', 'DELETE FROM', 'DROP TABLE', '__import__', 'eval(', 'exec(']
        
        all_args = ' '.join(str(arg) for arg in args) + ' '.join(str(v) for v in kwargs.values())
        
        for pattern in dangerous_patterns:
            if pattern.lower() in all_args.lower():
                logger.warning(f"üö® Dangerous pattern detected in tool call: {pattern}")
                raise Exception(f"Dangerous operation blocked: {pattern}")
        
        return func(*args, **kwargs)
    return wrapper


def caching_hook(cache_ttl: int = 300):
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    cache = {}
    
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        def wrapper(*args, **kwargs):
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            cache_key = f"{func.__name__}:{hash(str(args) + str(sorted(kwargs.items())))}"
            now = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if cache_key in cache:
                result, timestamp = cache[cache_key]
                if now - timestamp < cache_ttl:
                    logger.debug(f"üîÑ Cache hit for {func.__name__}")
                    return result
                else:
                    del cache[cache_key]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏ –∫—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = func(*args, **kwargs)
            cache[cache_key] = (result, now)
            logger.debug(f"üíæ Cached result for {func.__name__}")
            return result
        return wrapper
    return decorator


def metrics_hook(func: Callable) -> Callable:
    """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        start_time = time.time()
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        try:
            result = func(*args, **kwargs)
            duration = time.time() - start_time
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
            logger.debug(f"üìä Metrics: {func.__name__} - success - {duration:.3f}s")
            return result
        except Exception as e:
            duration = time.time() - start_time
            logger.debug(f"üìä Metrics: {func.__name__} - error - {duration:.3f}s")
            raise
    return wrapper


def error_recovery_hook(func: Callable) -> Callable:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        max_retries = 2
        for attempt in range(max_retries + 1):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                if attempt < max_retries:
                    logger.warning(f"üîÑ Tool {func.__name__} failed (attempt {attempt + 1}), retrying: {e}")
                    time.sleep(0.5 * (attempt + 1))  # Exponential backoff
                    continue
                else:
                    logger.error(f"‚ùå Tool {func.__name__} failed after {max_retries + 1} attempts: {e}")
                    raise
    return wrapper


# === –†–ï–ï–°–¢–† HOOK'–û–í ===

TOOL_HOOKS_REGISTRY: Dict[str, Callable] = {
    "logging": logging_hook,
    "rate_limiting": lambda: rate_limiting_hook(max_calls_per_minute=30),
    "rate_limiting_strict": lambda: rate_limiting_hook(max_calls_per_minute=10),
    "rate_limiting_relaxed": lambda: rate_limiting_hook(max_calls_per_minute=60),
    "validation": validation_hook,
    "cache_5min": lambda: caching_hook(cache_ttl=300),
    "cache_1min": lambda: caching_hook(cache_ttl=60),
    "cache_15min": lambda: caching_hook(cache_ttl=900),
    "metrics": metrics_hook,
    "error_recovery": error_recovery_hook,
}


def get_tool_hooks(hook_names: List[str]) -> List[Callable]:
    """
    –ü–æ–ª—É—á–∏—Ç—å hook —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∞–º
    
    Args:
        hook_names: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω hook'–æ–≤
        
    Returns:
        –°–ø–∏—Å–æ–∫ hook —Ñ—É–Ω–∫—Ü–∏–π
    """
    hooks = []
    for hook_name in hook_names:
        if hook_name in TOOL_HOOKS_REGISTRY:
            hook_func = TOOL_HOOKS_REGISTRY[hook_name]
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–±—Ä–∏–∫–∞ (lambda), –≤—ã–∑—ã–≤–∞–µ–º –µ—ë
            if callable(hook_func) and any(hook_name.startswith(prefix) for prefix in ['rate_limiting', 'cache']):
                hooks.append(hook_func())
            else:
                hooks.append(hook_func)
        else:
            logger.warning(f"Tool hook '{hook_name}' not found in registry")
    
    return hooks


def register_tool_hook(name: str, hook_func: Callable):
    """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π hook"""
    TOOL_HOOKS_REGISTRY[name] = hook_func


def list_available_hooks() -> List[str]:
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö hook'–æ–≤"""
    return list(TOOL_HOOKS_REGISTRY.keys())


def get_hook_descriptions() -> Dict[str, str]:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –≤—Å–µ—Ö hook'–æ–≤"""
    return {
        "logging": "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        "rate_limiting": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 30 –≤—ã–∑–æ–≤–æ–≤ –≤ –º–∏–Ω—É—Ç—É",
        "rate_limiting_strict": "–°—Ç—Ä–æ–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 10 –≤—ã–∑–æ–≤–æ–≤ –≤ –º–∏–Ω—É—Ç—É",
        "rate_limiting_relaxed": "–ú—è–≥–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 60 –≤—ã–∑–æ–≤–æ–≤ –≤ –º–∏–Ω—É—Ç—É",
        "validation": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
        "cache_1min": "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ 1 –º–∏–Ω—É—Ç—É",
        "cache_5min": "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ 5 –º–∏–Ω—É—Ç",
        "cache_15min": "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ 15 –º–∏–Ω—É—Ç",
        "metrics": "–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
        "error_recovery": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"
    } 