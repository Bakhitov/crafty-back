#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –ë–î.
–°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GET /v1/tools.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv()

from sqlalchemy.orm import Session
from db.session import SessionLocal
from db.models.tool import Tool

def get_db_session() -> Session:
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –ë–î –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    return SessionLocal()

def create_test_tools():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤"""
    db = get_db_session()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        existing_tools = db.query(Tool).filter(Tool.name.like('test_%')).all()
        if existing_tools:
            print(f"–£–¥–∞–ª—è—é {len(existing_tools)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
            for tool in existing_tools:
                db.delete(tool)
            db.commit()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        test_tools = [
            # Builtin –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            Tool(
                name="test_duckduckgo_search",
                type="builtin",
                description="–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ DuckDuckGo",
                configuration={
                    "class": "DuckDuckGoTools",
                    "params": {"max_results": 5}
                },
                is_public=True,
                category="search",
                display_name="–ü–æ–∏—Å–∫ DuckDuckGo"
            ),
            Tool(
                name="test_file_tools",
                type="builtin", 
                description="–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏",
                configuration={
                    "class": "FileTools",
                    "params": {"base_dir": "/tmp"}
                },
                is_public=True,
                category="files",
                display_name="–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏"
            ),
            
            # MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            Tool(
                name="test_mcp_weather",
                type="mcp",
                description="–¢–µ—Å—Ç–æ–≤—ã–π MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–≥–æ–¥—ã",
                configuration={
                    "command": ["node", "/path/to/weather/server.js"],
                    "env": {"API_KEY": "test_key"},
                    "transport": "stdio",
                    "timeout_seconds": 10
                },
                is_public=False,
                category="weather",
                display_name="–ü–æ–≥–æ–¥–∞ MCP"
            ),
            Tool(
                name="test_mcp_calendar",
                type="mcp",
                description="–¢–µ—Å—Ç–æ–≤—ã–π MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è",
                configuration={
                    "url": "http://localhost:3001/mcp",
                    "transport": "http",
                    "timeout_seconds": 5
                },
                is_public=True,
                category="productivity",
                display_name="–ö–∞–ª–µ–Ω–¥–∞—Ä—å MCP"
            ),
            
            # Custom –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            Tool(
                name="test_custom_calculator",
                type="custom",
                description="–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞",
                configuration={
                    "function_code": """
def calculate(expression: str) -> str:
    '''–ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π'''
    try:
        result = eval(expression)
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"
"""
                },
                is_public=False,
                category="math",
                display_name="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"
            ),
            Tool(
                name="test_custom_text_processor",
                type="custom",
                description="–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞",
                configuration={
                    "function_code": """
def process_text(text: str, operation: str = "uppercase") -> str:
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏'''
    if operation == "uppercase":
        return text.upper()
    elif operation == "lowercase":
        return text.lower()
    elif operation == "reverse":
        return text[::-1]
    else:
        return text
"""
                },
                is_public=True,
                category="text",
                display_name="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"
            ),
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            Tool(
                name="test_inactive_tool",
                type="builtin",
                description="–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç",
                configuration={"class": "DuckDuckGoTools"},
                is_public=True,
                category="test",
                display_name="–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç",
                is_active=False
            )
        ]
        
        print(f"–°–æ–∑–¥–∞—é {len(test_tools)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        for tool in test_tools:
            db.add(tool)
        
        db.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        created_tools = db.query(Tool).filter(Tool.name.like('test_%')).all()
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(created_tools)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
        
        for tool in created_tools:
            status = "–∞–∫—Ç–∏–≤–Ω—ã–π" if tool.is_active else "–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
            visibility = "–ø—É–±–ª–∏—á–Ω—ã–π" if tool.is_public else "–ø—Ä–∏–≤–∞—Ç–Ω—ã–π"
            print(f"  - {tool.name} ({tool.type}, {status}, {visibility}) [{tool.category}]")
            
        print(f"\nüß™ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç GET /v1/tools")
        print("–ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤:")
        print("  curl http://localhost:8000/v1/tools")
        print("  curl 'http://localhost:8000/v1/tools?type_filter=builtin'")
        print("  curl 'http://localhost:8000/v1/tools?category=search'")
        print("  curl 'http://localhost:8000/v1/tools?is_active=false'")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
        db.rollback()
        return False
    finally:
        db.close()
    
    return True

if __name__ == "__main__":
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    success = create_test_tools()
    sys.exit(0 if success else 1) 