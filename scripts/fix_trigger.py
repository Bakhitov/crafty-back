#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∫—ç—à-–∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from dotenv import load_dotenv
load_dotenv()

import psycopg
from db.url import get_db_url

def fix_trigger():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∫—ç—à-–∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ["DB_URL"] = "postgresql://postgres:Ginifi51!@db.wyehpfzafbjfvyjzgjss.supabase.co:5432/postgres"
        
        # –ü–æ–ª—É—á–∞–µ–º URL –ë–î
        db_url = get_db_url()
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {db_url[:50]}...")
        
        # –î–ª—è psycopg –Ω—É–∂–µ–Ω –æ–±—ã—á–Ω—ã–π postgresql:// URL
        if db_url.startswith("postgresql+psycopg://"):
            db_url = db_url.replace("postgresql+psycopg://", "postgresql://", 1)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        with psycopg.connect(db_url) as conn:
            with conn.cursor() as cur:
                print("üóëÔ∏è –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã...")
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
                cur.execute("DROP TRIGGER IF EXISTS tools_cache_invalidation_trigger ON tools;")
                cur.execute("DROP TRIGGER IF EXISTS agents_cache_invalidation_trigger ON agents;")
                cur.execute("DROP FUNCTION IF EXISTS notify_cache_invalidation();")
                
                print("üîß –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ç—Ä–∏–≥–≥–µ—Ä–∞...")
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
                fix_sql = """
                CREATE OR REPLACE FUNCTION notify_cache_invalidation()
                RETURNS TRIGGER AS $$
                DECLARE
                    payload JSON;
                BEGIN
                    -- –§–æ—Ä–º–∏—Ä—É–µ–º payload –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
                    IF TG_OP = 'INSERT' THEN
                        payload = json_build_object(
                            'operation', 'INSERT',
                            'table', TG_TABLE_NAME,
                            'id', NEW.id::text,
                            'agent_id', CASE WHEN TG_TABLE_NAME = 'agents' THEN NEW.agent_id::text ELSE NULL END
                        );
                        PERFORM pg_notify('cache_invalidation', payload::text);
                        RETURN NEW;
                        
                    ELSIF TG_OP = 'DELETE' THEN
                        payload = json_build_object(
                            'operation', 'DELETE',
                            'table', TG_TABLE_NAME,
                            'id', OLD.id::text,
                            'agent_id', CASE WHEN TG_TABLE_NAME = 'agents' THEN OLD.agent_id::text ELSE NULL END
                        );
                        PERFORM pg_notify('cache_invalidation', payload::text);
                        RETURN OLD;
                        
                    END IF;
                    
                    RETURN NULL;
                END;
                $$ LANGUAGE plpgsql;
                """
                
                cur.execute(fix_sql)
                
                print("üîß –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã...")
                
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –∑–∞–Ω–æ–≤–æ
                cur.execute("""
                    CREATE TRIGGER agents_cache_invalidation_trigger
                    AFTER INSERT OR DELETE ON agents
                    FOR EACH ROW EXECUTE FUNCTION notify_cache_invalidation();
                """)
                
                cur.execute("""
                    CREATE TRIGGER tools_cache_invalidation_trigger
                    AFTER INSERT OR DELETE ON tools
                    FOR EACH ROW EXECUTE FUNCTION notify_cache_invalidation();
                """)
                
                conn.commit()
                print("‚úÖ –¢—Ä–∏–≥–≥–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã!")
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
        return False

if __name__ == "__main__":
    success = fix_trigger()
    sys.exit(0 if success else 1) 