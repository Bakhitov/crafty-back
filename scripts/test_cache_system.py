#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å PostgreSQL —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏.

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—é –∫—ç—à–∞ –ø—Ä–∏ UPDATE (—á–µ—Ä–µ–∑ updated_at)
2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—é –∫—ç—à–∞ –ø—Ä–∏ INSERT/DELETE (—á–µ—Ä–µ–∑ NOTIFY —Ç—Ä–∏–≥–≥–µ—Ä—ã)
3. –†–∞–±–æ—Ç—É Cache Listener
4. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
5. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import sys
import os
import time
import asyncio
import requests
import json
from typing import Dict, Any

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

from sqlalchemy.orm import Session
from db.session import SessionLocal
from db.models.agent import DynamicAgent
from db.models.tool import Tool
from agents.cache_listener import cache_listener

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8000/v1"
TEST_AGENT_ID = "cache_test_agent"
TEST_TOOL_NAME = "cache_test_tool"

def get_db_session() -> Session:
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –ë–î"""
    return SessionLocal()

def make_request(method: str, endpoint: str, **kwargs) -> Dict[str, Any]:
    """–î–µ–ª–∞–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ API"""
    url = f"{BASE_URL}{endpoint}"
    try:
        response = requests.request(method, url, timeout=10, **kwargs)
        return {
            "status_code": response.status_code,
            "data": response.json() if response.content else {},
            "success": 200 <= response.status_code < 300
        }
    except Exception as e:
        return {
            "status_code": 0,
            "data": {"error": str(e)},
            "success": False
        }

def test_cache_invalidation_on_update():
    """–¢–µ—Å—Ç 1: –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø—Ä–∏ UPDATE —á–µ—Ä–µ–∑ updated_at"""
    print("\nüîÑ –¢–ï–°–¢ 1: –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø—Ä–∏ UPDATE")
    print("=" * 50)
    
    db = get_db_session()
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        test_agent = DynamicAgent(
            agent_id=TEST_AGENT_ID,
            name="Cache Test Agent v1",
            description="–¢–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è",
            model_config={"provider": "openai", "id": "gpt-4.1-mini-2025-04-14"},
            system_instructions=["–Ø —Ç–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç –≤–µ—Ä—Å–∏–∏ 1"],
            is_active=True,
            is_public=True
        )
        
        # –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        existing = db.query(DynamicAgent).filter(DynamicAgent.agent_id == TEST_AGENT_ID).first()
        if existing:
            db.delete(existing)
            db.commit()
        
        db.add(test_agent)
        db.commit()
        db.refresh(test_agent)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç: {test_agent.agent_id}")
        
        # 2. –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É (–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –∫—ç—à)
        print("üìû –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É (—Å–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à–∞)...")
        response1 = make_request("POST", f"/agents/{TEST_AGENT_ID}/runs", 
                                data={"message": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", "stream": "false"})
        
        if response1["success"]:
            print("‚úÖ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω - –∞–≥–µ–Ω—Ç –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω")
        else:
            print(f"‚ùå –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω: {response1}")
            return False
        
        # 3. –ò–∑–º–µ–Ω—è–µ–º –∞–≥–µ–Ω—Ç–∞ –≤ –ë–î (UPDATE)
        print("üîß –ò–∑–º–µ–Ω—è–µ–º –∏–º—è –∞–≥–µ–Ω—Ç–∞ –≤ –ë–î...")
        test_agent.name = "Cache Test Agent v2 (UPDATED)"
        test_agent.system_instructions = ["–Ø —Ç–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç –≤–µ—Ä—Å–∏–∏ 2 - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô!"]
        db.commit()
        print("‚úÖ –ê–≥–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î (—Ç—Ä–∏–≥–≥–µ—Ä updated_at –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å)")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        time.sleep(1)
        
        # 4. –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É (–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é)
        print("üìû –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞)...")
        response2 = make_request("POST", f"/agents/{TEST_AGENT_ID}/runs",
                                data={"message": "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ö–∞–∫–∞—è —É —Ç–µ–±—è –≤–µ—Ä—Å–∏—è?", "stream": "false"})
        
        if response2["success"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≥–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∫–∞–∫ –≤–µ—Ä—Å–∏—è 2
            content = str(response2.get("data", {}))
            if "–≤–µ—Ä—Å–∏–∏ 2" in content or "–û–ë–ù–û–í–õ–ï–ù–ù–´–ô" in content or "v2" in content:
                print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ö—ç—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–ª—Å—è –ø—Ä–∏ UPDATE!")
                return True
            else:
                print("‚ö†Ô∏è –ê–≥–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –∫—ç—à–∞")
                print(f"–û—Ç–≤–µ—Ç: {content[:200]}...")
                return False
        else:
            print(f"‚ùå –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω: {response2}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ UPDATE: {e}")
        return False
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        try:
            existing = db.query(DynamicAgent).filter(DynamicAgent.agent_id == TEST_AGENT_ID).first()
            if existing:
                db.delete(existing)
                db.commit()
        except:
            pass
        db.close()

def test_cache_invalidation_on_insert_delete():
    """–¢–µ—Å—Ç 2: –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø—Ä–∏ INSERT/DELETE —á–µ—Ä–µ–∑ NOTIFY —Ç—Ä–∏–≥–≥–µ—Ä—ã"""
    print("\n‚ûï –¢–ï–°–¢ 2: –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø—Ä–∏ INSERT/DELETE")
    print("=" * 50)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    print("üìã –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤...")
    response1 = make_request("GET", "/agents")
    if not response1["success"]:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤: {response1}")
        return False
    
    initial_agents = response1["data"]
    initial_count = len(initial_agents)
    print(f"‚úÖ –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤: {initial_count}")
    
    # 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ë–î (INSERT)
    print("‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –≤ –ë–î...")
    db = get_db_session()
    try:
        # –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        existing = db.query(DynamicAgent).filter(DynamicAgent.agent_id == TEST_AGENT_ID).first()
        if existing:
            db.delete(existing)
            db.commit()
        
        new_agent = DynamicAgent(
            agent_id=TEST_AGENT_ID,
            name="Cache INSERT Test Agent",
            description="–¢–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ INSERT —Ç—Ä–∏–≥–≥–µ—Ä–∞",
            model_config={"provider": "openai", "id": "gpt-4o"},
            is_active=True,
            is_public=True
        )
        
        db.add(new_agent)
        db.commit()
        print("‚úÖ –ù–æ–≤—ã–π –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –≤ –ë–î (NOTIFY —Ç—Ä–∏–≥–≥–µ—Ä –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å)")
        
        # –ü–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ NOTIFY
        time.sleep(2)
        
        # 3. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        print("üìã –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤...")
        response2 = make_request("GET", "/agents")
        if not response2["success"]:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: {response2}")
            return False
        
        updated_agents = response2["data"]
        updated_count = len(updated_agents)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤: {updated_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–π –∞–≥–µ–Ω—Ç –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ
        if TEST_AGENT_ID in updated_agents:
            print("‚úÖ –ù–æ–≤—ã–π –∞–≥–µ–Ω—Ç –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ - –∫—ç—à –æ–±–Ω–æ–≤–∏–ª—Å—è!")
        else:
            print("‚ö†Ô∏è –ù–æ–≤—ã–π –∞–≥–µ–Ω—Ç –ù–ï –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ - –≤–æ–∑–º–æ–∂–Ω–æ –∫—ç—à –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è")
            print(f"–°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤: {updated_agents}")
        
        # 4. –£–¥–∞–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞ (DELETE)
        print("üóëÔ∏è –£–¥–∞–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞ –∏–∑ –ë–î...")
        db.delete(new_agent)
        db.commit()
        print("‚úÖ –ê–≥–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î (NOTIFY —Ç—Ä–∏–≥–≥–µ—Ä –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å)")
        
        # –ü–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ NOTIFY
        time.sleep(2)
        
        # 5. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        print("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è...")
        response3 = make_request("GET", "/agents")
        if not response3["success"]:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {response3}")
            return False
        
        final_agents = response3["data"]
        final_count = len(final_agents)
        print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤: {final_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≥–µ–Ω—Ç –∏—Å—á–µ–∑ –∏–∑ —Å–ø–∏—Å–∫–∞
        if TEST_AGENT_ID not in final_agents and final_count == initial_count:
            print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ö—ç—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–ª—Å—è –ø—Ä–∏ INSERT/DELETE!")
            return True
        else:
            print("‚ö†Ô∏è –ê–≥–µ–Ω—Ç –≤—Å–µ –µ—â–µ –≤ —Å–ø–∏—Å–∫–µ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
            print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫: {final_agents}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ INSERT/DELETE: {e}")
        return False
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        try:
            existing = db.query(DynamicAgent).filter(DynamicAgent.agent_id == TEST_AGENT_ID).first()
            if existing:
                db.delete(existing)
                db.commit()
        except:
            pass
        db.close()

def test_tools_caching():
    """–¢–µ—Å—Ç 3: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print("\nüîß –¢–ï–°–¢ 3: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 50)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    print("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    response1 = make_request("GET", "/tools")
    if not response1["success"]:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {response1}")
        return False
    
    tools_list = response1["data"]
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(tools_list)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    
    # 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    print("‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç...")
    db = get_db_session()
    try:
        # –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        existing = db.query(Tool).filter(Tool.name == TEST_TOOL_NAME).first()
        if existing:
            db.delete(existing)
            db.commit()
        
        new_tool = Tool(
            name=TEST_TOOL_NAME,
            type="builtin",
            description="–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è",
            configuration={"class": "DuckDuckGoTools"},
            is_active=True,
            is_public=True,
            category="test"
        )
        
        db.add(new_tool)
        db.commit()
        print("‚úÖ –ù–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        
        # –ü–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        time.sleep(1)
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ
        print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        response2 = make_request("GET", "/tools")
        if response2["success"]:
            updated_tools = response2["data"]
            tool_names = [tool.get("name", "") for tool in updated_tools]
            if TEST_TOOL_NAME in tool_names:
                print("‚úÖ –ù–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ!")
            else:
                print("‚ö†Ô∏è –ù–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ù–ï –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ")
                
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        response3 = make_request("GET", "/tools?category=test")
        if response3["success"]:
            test_tools = response3["data"]
            if any(tool.get("name") == TEST_TOOL_NAME for tool in test_tools):
                print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                return True
            else:
                print("‚ö†Ô∏è –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {response3}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
        return False
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        try:
            existing = db.query(Tool).filter(Tool.name == TEST_TOOL_NAME).first()
            if existing:
                db.delete(existing)
                db.commit()
        except:
            pass
        db.close()

def test_cache_endpoints():
    """–¢–µ—Å—Ç 4: –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º"""
    print("\nüéõÔ∏è –¢–ï–°–¢ 4: –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º")
    print("=" * 50)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
    print("üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞...")
    response1 = make_request("GET", "/cache/stats")
    if response1["success"]:
        stats = response1["data"]
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
        print(f"   - –ö—ç—à –∞–≥–µ–Ω—Ç–æ–≤: {stats.get('agents_cache', {})}")
        print(f"   - –ö—ç—à –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {stats.get('tools_cache', {})}")
        print(f"   - –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {stats.get('total_cached_objects', 0)}")
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {response1}")
        return False
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞
    print("üßπ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞...")
    response2 = make_request("POST", "/cache/clear")
    if response2["success"]:
        clear_result = response2["data"]
        print(f"‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω:")
        print(f"   - –ê–≥–µ–Ω—Ç–æ–≤ –æ—á–∏—â–µ–Ω–æ: {clear_result.get('agents_cleared', 0)}")
        print(f"   - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ—á–∏—â–µ–Ω–æ: {clear_result.get('tools_cleared', 0)}")
        print(f"   - –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –æ—á–∏—â–µ–Ω: {clear_result.get('available_agents_cache_cleared', False)}")
        return True
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à: {response2}")
        return False

async def test_cache_listener():
    """–¢–µ—Å—Ç 5: Cache Listener (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)"""
    print("\nüëÇ –¢–ï–°–¢ 5: Cache Listener")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ listener –∑–∞–ø—É—â–µ–Ω
        if hasattr(cache_listener, 'is_listening') and cache_listener.is_listening:
            print("‚úÖ Cache Listener –∞–∫—Ç–∏–≤–µ–Ω")
            return True
        else:
            print("‚ö†Ô∏è Cache Listener –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∑–∞–ø—É—â–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ)")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Cache Listener: {e}")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—é –∫—ç—à–∞ —á–µ—Ä–µ–∑ PostgreSQL —Ç—Ä–∏–≥–≥–µ—Ä—ã")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    print("üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API...")
    health_response = make_request("GET", "/health")
    if not health_response["success"]:
        print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: docker compose up -d")
        return False
    print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("UPDATE –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è", test_cache_invalidation_on_update),
        ("INSERT/DELETE –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è", test_cache_invalidation_on_insert_delete),
        ("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", test_tools_caching),
        ("–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –∫—ç—à–∞", test_cache_endpoints),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\n{'='*60}")
        print(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
            if result:
                print(f"‚úÖ –¢–ï–°–¢ '{test_name}' –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå –¢–ï–°–¢ '{test_name}' –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"üí• –¢–ï–°–¢ '{test_name}' –£–ü–ê–õ: {e}")
            results.append((test_name, False))
    
    # –¢–µ—Å—Ç Cache Listener (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
    try:
        print(f"\n{'='*60}")
        print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: Cache Listener")
        listener_result = asyncio.run(test_cache_listener())
        results.append(("Cache Listener", listener_result))
        if listener_result:
            print("‚úÖ –¢–ï–°–¢ 'Cache Listener' –ü–†–û–ô–î–ï–ù")
        else:
            print("‚ùå –¢–ï–°–¢ 'Cache Listener' –ù–ï –ü–†–û–ô–î–ï–ù")
    except Exception as e:
        print(f"üí• –¢–ï–°–¢ 'Cache Listener' –£–ü–ê–õ: {e}")
        results.append(("Cache Listener", False))
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"   {test_name:<30} {status}")
    
    print(f"\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 